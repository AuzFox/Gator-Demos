[gd_scene load_steps=4 format=2]

[ext_resource path="res://addons/gator/src/gator_scene.gd" type="Script" id=1]
[ext_resource path="res://demo1_basic_usage/entity_collection.tres" type="Resource" id=2]
[ext_resource path="res://demo1_basic_usage/entity1.tscn" type="PackedScene" id=3]

[node name="Spatial" type="Spatial"]

[node name="READ MY EDITOR DESC" type="Node" parent="."]
__meta__ = {
"_editor_description_": "Gator Demo 1: Basic Usage

This demo demonstrates how to set up a simple scene with the plugin.

main_scene.tscn is fully configured with 2 simple entity types, one that spawns a scene when building, and one that spawns a blank Spatial node.
All Crocotile3D assets are present in the demo1_basic_usage/crocotile_assets/ directory, which is hidden in Godot to prevent importing.

[ 0. Getting Started ]

To use Gator to instance Godot scenes, a few things must be set up first.
Each of the following steps will be elaborated upon in their own sections.
	1. A GatorEntityDefinition resource must be created. (This demo uses 2 definitions.)
	2. A GatorEntityCollection resource must be created. (This demo uses only 1 collection.)
	3. A GatorScene node must be placed in the Godot scene.
	4. A Crocotile scene must be created, with at least one object and instance.
	5. Finally, the scene data must be exported from Crocotile to a file, and placed in the Godot project.

[ 1. Creating the GatorEntityDefinition(s) ]

A GatorEntityDefinition defines the properties that an entity will be assigned when the plugin builds the Crocotile scene.
It may also optionally hold a reference to a Godot scene, which will be instanced into the current Godot scene tree during a build.

One GatorEntityDefinition resource should be created for each unique entity type needed for your project.

To create a new GatorEntityDefinition:
- Right-click on the desired destination directory in Godot.
- Select \"New Resource...\".
- Type \"Gator\" into the search bar.
- Select \"GatorEntityDefinition\" and click \"Create\".
- Finally, name the file whatever you like and click \"Save\".

The newly-created definition file should be assigned the following values by opening it in the Inspector:
- Entity Tag: A unique name for the entity type. (\"Coin\", or \"PlayerSpawn\" for example.)
- Entity Type: Can be set to \"Scene\" or \"Empty\":
	- Scene entities will instance a Godot scene during builds.
	- Empty entities will be instanced as a plain Spatial node with no script attached.
- Scene: A reference to a saved Godot scene file. Only needed if Entity Type is set to \"Scene\".
- Properties: A dictionary of properties that each instance of the entity will be assigned.
	- Each key must be a String, and can have any name.
	- Each value will be used as the default value for the property, and can have any type that can be parsed by Godot's str2var() function.

[ 2. Creating the GatorEntityCollection ]

A GatorEntityCollection simply contains a list of GatorEntityDefinitions.
Only one GatorEntityCollection is strictly required, but multiple different collections can be created to organize entity definitions.

Creating a GatorEntityCollection is essentially the same as creating a GatorEntityDefinition, only selecting \"GatorEntityCollection\" instead.
With the collection open in the Inspector, add entity definitions to the Entity Definitions array.

[ 3. Configuring the GatorScene ]

A GatorScene node will act as the parent for all scenes/nodes generated by the plugin for a given C3D data file.
The GatorScene node type should be available when adding a new node into a Godot scene.
Multiple GatorScene nodes can be placed in the same scene, if desired. Each with different settings applied.

GatorScene nodes have the following properties:
- Data File: A reference to the scene data file exported from Crocotile3D.
- Entity Collection: The GatorEntityCollection to use when building the entities in the data file.
- Scene Scale: A multiplier for the scale of the C3D's coordinate system. A setting of 1 will build the scene at 1:1 scale.

[ 4. Creating the Crocotile3D Scene ]

In the Crocotile3D scene, at least 1 object and instance should be created.
To associate an object with a Gator entity type, follow these steps:
- In Crocotile3D's Scene panel, right-click the object (not the instance) and select \"Properties\".
- Under the \"Custom\" section, create an Object property of type String with the name \"gt-tag\".
	- For the gt-tag value, enter the Entity Tag of the desired Gator entity.
- Create an Instance property for each property that the Gator Entity defines.
	- Properties of type int and float should be set to the Number type.
	- Any other type must be set to the String type, and formatted according to str2var() parsing.

Any Crocotile objects that lack a \"gt-tag\" property will be implicitly ignored by Gator.
Objects can also be explicitly ignored by giving them a \"gt-ignore\" Object property.

Finally, set the desired values for any properties on the instances in the scene.

[ 5. Exporting the Crocotile3D Scene Data ]

When all objects and instances have been configured, go to the Scene tab and select \"Export Scene Data\" from the Scene menu.
Place the resulting file wherever you like, and be sure to set the GatorScene's Data File property with the path to it.

[ Building ]

With all other steps completed, select the configured GatorScene node in Godot to reveal the \"Build\" button in the 3D scene toolbar.
Click Build to begin the build proccess, any errors will be printed to the Output console."
}

[node name="GatorScene" type="Spatial" parent="."]
script = ExtResource( 1 )
data_file = "res://demo1_basic_usage/crocotile_assets/crocotile_object_data.txt"
entity_collection = ExtResource( 2 )

[node name="Entity1_Instance" parent="GatorScene" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.5, 0, 0 )
properties = {
"property": "not the default!"
}

[node name="Entity2_Instance" type="Spatial" parent="GatorScene"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.5, 0, 0 )
